import { SignalService } from '@session.js/types/signal-bindings';
import { ExpirableMessage } from '../expirable-message.js';
import { ReactionAction } from '../../reactions/index.js';
import { serializeProfile } from '../../profile/index.js';
export class VisibleMessage extends ExpirableMessage {
    reaction;
    attachments;
    body;
    quote;
    profileKey;
    profile;
    preview;
    syncTarget;
    constructor(params) {
        super({
            timestamp: params.timestamp,
            identifier: params.identifier,
            expirationType: params.expirationType,
            expireTimer: params.expireTimer,
        });
        this.attachments = params.attachments;
        this.body = params.body;
        this.quote = params.quote;
        if (params.profile) {
            const profile = serializeProfile(params.profile);
            this.profile = profile.lokiProfile;
            this.profileKey = profile.profileKey;
        }
        this.preview = params.preview;
        this.reaction = params.reaction;
        this.syncTarget = params.syncTarget;
    }
    contentProto() {
        const content = super.contentProto();
        content.dataMessage = this.dataProto();
        return content;
    }
    dataProto() {
        const dataMessage = super.dataProto();
        if (this.body) {
            dataMessage.body = this.body;
        }
        dataMessage.attachments = this.attachments || [];
        if (this.preview) {
            dataMessage.preview = this.preview;
        }
        if (this.reaction) {
            dataMessage.reaction = {
                ...this.reaction,
                action: this.reaction.action === ReactionAction.REACT
                    ? SignalService.DataMessage.Reaction.Action.REACT
                    : SignalService.DataMessage.Reaction.Action.REMOVE
            };
        }
        if (this.syncTarget) {
            dataMessage.syncTarget = this.syncTarget;
        }
        if (this.profile) {
            dataMessage.profile = this.profile;
        }
        if (this.profileKey && this.profileKey.length) {
            dataMessage.profileKey = this.profileKey;
        }
        if (this.quote) {
            dataMessage.quote = new SignalService.DataMessage.Quote();
            dataMessage.quote.id = this.quote.id;
            dataMessage.quote.author = this.quote.author;
            dataMessage.quote.text = this.quote.text;
            if (this.quote.attachments) {
                dataMessage.quote.attachments = this.quote.attachments.map(attachment => {
                    const quotedAttachment = new SignalService.DataMessage.Quote.QuotedAttachment();
                    if (attachment.contentType) {
                        quotedAttachment.contentType = attachment.contentType;
                    }
                    if (attachment.fileName) {
                        quotedAttachment.fileName = attachment.fileName;
                    }
                    if (attachment.thumbnail && attachment.thumbnail.id) {
                        quotedAttachment.thumbnail = attachment.thumbnail;
                    }
                    return quotedAttachment;
                });
            }
        }
        if (Array.isArray(this.preview)) {
            dataMessage.preview = this.preview.map(preview => {
                const item = new SignalService.DataMessage.Preview();
                if (preview.title) {
                    item.title = preview.title;
                }
                if (preview.url) {
                    item.url = preview.url;
                }
                item.image = preview.image || null;
                return item;
            });
        }
        dataMessage.timestamp = this.timestamp;
        return dataMessage;
    }
    isEqual(comparator) {
        return this.identifier === comparator.identifier && this.timestamp === comparator.timestamp;
    }
}
