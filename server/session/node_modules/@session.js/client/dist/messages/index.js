import { SignalService } from '@session.js/types/signal-bindings';
import { deserializeProfile } from '../profile/index.js';
import { getPlaceholderDisplayName } from '../utils.js';
export function mapDataMessage({ hash, envelope, content }) {
    const isGroup = envelope.type === SignalService.Envelope.Type.CLOSED_GROUP_MESSAGE;
    let groupId;
    let from;
    if (isGroup) {
        groupId = envelope.source;
        from = envelope.senderIdentity;
    }
    else {
        from = envelope.source;
    }
    let timestamp = envelope.timestamp;
    if (typeof timestamp !== 'number') {
        timestamp = timestamp.toNumber();
    }
    const attachments = content.dataMessage?.attachments ? parseAttachments(content.dataMessage.attachments) : [];
    const author = deserializeProfile({
        lokiProfile: content.dataMessage.profile ?? undefined,
        profileKey: content.dataMessage.profileKey ?? undefined
    });
    author.displayName ||= getPlaceholderDisplayName(envelope.source);
    return {
        id: hash,
        ...(isGroup ? {
            type: 'group',
            groupId: groupId
        } : {
            type: 'private'
        }),
        from,
        author,
        ...(content.dataMessage.syncTarget && {
            to: content.dataMessage.syncTarget
        }),
        ...(typeof content.dataMessage?.body === 'string' && { text: content.dataMessage.body }),
        attachments,
        ...(content.dataMessage?.quote && { replyToMessage: parseQuote(content.dataMessage.quote) }),
        timestamp,
        getEnvelope: () => envelope,
        getContent: () => content,
        getReplyToMessage: () => ({
            author: from,
            timestamp: timestamp,
            attachments: attachments.map(a => ({
                ...(a.metadata.contentType && { contentType: a.metadata.contentType }),
                ...(a.name && { fileName: a.name })
            })),
            ...(typeof content.dataMessage?.body === 'string' && { text: content.dataMessage?.body })
        })
    };
}
export function parseAttachments(attachments) {
    return attachments.map(attachment => ({
        id: attachment.id.toString(),
        ...(attachment.caption && { caption: attachment.caption }),
        metadata: {
            ...(typeof attachment.width === 'number' && { width: attachment.width }),
            ...(typeof attachment.height === 'number' && { height: attachment.height }),
            ...(attachment.contentType && { contentType: attachment.contentType }),
        },
        ...(typeof attachment.size === 'number' && { size: attachment.size }),
        ...(attachment.fileName && { name: attachment.fileName }),
        ...(attachment.key && { _key: attachment.key }),
        ...(attachment.digest && { _digest: attachment.digest })
    }));
}
export function parseQuote(quote) {
    let id = quote.id;
    if (typeof id !== 'number') {
        id = id.toNumber();
    }
    return {
        timestamp: id,
        author: quote.author,
        ...(quote.text && { text: quote.text }),
        ...(quote.attachments && { attachments: quote.attachments.map(a => ({
                ...(a.contentType && { contentType: a.contentType }),
                ...(a.fileName && { fileName: a.fileName })
            })) }),
    };
}
export function mapUnsendMessage({ content }) {
    let timestamp = content.unsendMessage.timestamp;
    if (typeof timestamp !== 'number') {
        timestamp = timestamp.toNumber();
    }
    return {
        timestamp,
        from: content.unsendMessage.author
    };
}
export function mapReceiptMessage({ content, envelope }) {
    const timestamps = content.receiptMessage.timestamp;
    if (timestamps === null || timestamps === undefined) {
        return [];
    }
    const timestampsNumbers = timestamps.map(t => {
        if (typeof t !== 'number') {
            return t.toNumber();
        }
        return t;
    });
    return timestampsNumbers.map(t => ({ timestamp: t, conversation: envelope.source }));
}
export function mapTypingMessage({ content, envelope }) {
    const isTyping = content.typingMessage.action === SignalService.TypingMessage.Action.STARTED;
    return {
        isTyping,
        conversation: envelope.source,
    };
}
export function mapScreenshotTakenMessage({ content, envelope }) {
    let timestamp = content.dataExtractionNotification.timestamp;
    if (timestamp === null || timestamp === undefined) {
        timestamp = 0;
    }
    else {
        if (typeof timestamp !== 'number') {
            timestamp = timestamp.toNumber();
        }
    }
    return {
        timestamp,
        conversation: envelope.source
    };
}
export function mapMediaSavedMessage({ content, envelope }) {
    let timestamp = content.dataExtractionNotification.timestamp;
    if (timestamp === null || timestamp === undefined) {
        timestamp = 0;
    }
    else {
        if (typeof timestamp !== 'number') {
            timestamp = timestamp.toNumber();
        }
    }
    return {
        timestamp,
        conversation: envelope.source
    };
}
export function mapMessageRequestResponseMessage({ content, envelope }) {
    const profile = deserializeProfile({
        lokiProfile: content.messageRequestResponse.profile ?? undefined,
        profileKey: content.messageRequestResponse.profileKey ?? undefined
    });
    profile.displayName ||= getPlaceholderDisplayName(envelope.source);
    return {
        profile,
        conversation: envelope.source
    };
}
export function mapCallMessage({ content, envelope }) {
    return {
        uuid: content.callMessage.uuid,
        type: content.callMessage.type,
        from: envelope.source
    };
}
export function mapReactionMessage({ content, envelope }) {
    let messageTimestamp = content.dataMessage?.reaction.id;
    if (messageTimestamp === null || messageTimestamp === undefined)
        return null;
    const emoji = content.dataMessage?.reaction?.emoji;
    if (!emoji)
        return null;
    const author = content.dataMessage?.reaction?.author;
    if (!author)
        return null;
    if (typeof messageTimestamp !== 'number') {
        messageTimestamp = messageTimestamp.toNumber();
    }
    return {
        messageTimestamp,
        messageAuthor: author,
        emoji,
        reactionFrom: envelope.source
    };
}
