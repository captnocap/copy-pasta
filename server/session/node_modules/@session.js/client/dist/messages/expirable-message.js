// CREDIT: OXEN, Session-Desktop
// github.com/oxen-io/session-desktop
import { SignalService } from '@session.js/types/signal-bindings';
import { DURATION, TTL_DEFAULT } from '@session.js/consts';
import { ContentMessage } from './signal-message.js';
export class ExpirableMessage extends ContentMessage {
    expirationType;
    /** in seconds, 0 means no expiration */
    expireTimer;
    constructor(params) {
        super({
            timestamp: params.timestamp,
            identifier: params.identifier,
        });
        this.expirationType = params.expirationType;
        this.expireTimer = params.expireTimer;
    }
    contentProto() {
        return new SignalService.Content({
            // TODO legacy messages support will be removed in a future release
            expirationType: this.expirationType === 'deleteAfterSend'
                ? SignalService.Content.ExpirationType.DELETE_AFTER_SEND
                : this.expirationType === 'deleteAfterRead'
                    ? SignalService.Content.ExpirationType.DELETE_AFTER_READ
                    : this.expirationType === 'unknown'
                        ? SignalService.Content.ExpirationType.UNKNOWN
                        : undefined,
            expirationTimer: this.expireTimer && this.expireTimer > -1 ? this.expireTimer : undefined,
        });
    }
    dataProto() {
        return new SignalService.DataMessage({
            // TODO legacy messages support will be removed in a future release
            expireTimer: (this.expirationType === 'unknown' || !this.expirationType) &&
                this.expireTimer &&
                this.expireTimer > -1
                ? this.expireTimer
                : undefined,
        });
    }
    getDisappearingMessageType() {
        return this.expirationType || undefined;
    }
    ttl() {
        switch (this.expirationType) {
            case 'deleteAfterSend':
                return this.expireTimer ? this.expireTimer * DURATION.SECONDS : TTL_DEFAULT.CONTENT_MESSAGE;
            case 'deleteAfterRead':
                return TTL_DEFAULT.CONTENT_MESSAGE;
            default:
                return TTL_DEFAULT.CONTENT_MESSAGE;
        }
    }
}
