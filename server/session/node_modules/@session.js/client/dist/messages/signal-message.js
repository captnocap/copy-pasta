// CREDIT: OXEN, Session-Desktop
// github.com/oxen-io/session-desktop
import { SignalService } from '@session.js/types/signal-bindings';
import { SnodeNamespaces } from '@session.js/types/namespaces';
import { v4 as uuid } from 'uuid';
import { SessionValidationError, SessionValidationErrorCode } from '@session.js/errors';
export class SignalMessage {
    timestamp;
    identifier;
    constructor({ timestamp, identifier }) {
        this.timestamp = timestamp;
        if (identifier && identifier.length === 0) {
            throw new SessionValidationError({ code: SessionValidationErrorCode.InvalidOptions, message: 'Cannot set empty identifier' });
        }
        if (!timestamp) {
            throw new SessionValidationError({ code: SessionValidationErrorCode.InvalidOptions, message: 'Cannot set undefined timestamp' });
        }
        this.identifier = identifier || uuid();
    }
}
export class ContentMessage extends SignalMessage {
    plainTextBuffer() {
        return SignalService.Content.encode(this.contentProto()).finish();
    }
    ttl() {
        return 14 * 24 * 60 * 60 * 1000;
    }
}
export function toRawMessage(destinationPubKey, message, namespace, isGroup = false) {
    const ttl = message.ttl();
    const plainTextBuffer = message.plainTextBuffer();
    const encryption = isGroup
        ? SignalService.Envelope.Type.CLOSED_GROUP_MESSAGE
        : SignalService.Envelope.Type.SESSION_MESSAGE;
    const rawMessage = {
        identifier: message.identifier,
        plainTextBuffer,
        recipient: destinationPubKey,
        ttl,
        encryption,
        namespace,
    };
    return rawMessage;
}
