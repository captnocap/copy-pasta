import type { Session } from '../instance/index.js';
import { VisibleMessage } from '../messages/schema/visible-message.js';
import type { KeyPair } from 'libsodium-wrappers-sumo';
export declare function blindSessionId(this: Session, serverPk: string): string;
export declare function encodeSogsMessage(this: Session, { serverPk, message, blind }: {
    serverPk: string;
    message: VisibleMessage;
    blind: boolean;
}): {
    data: string;
    signature: string;
};
export declare function addMessagePadding(messageBuffer: Uint8Array): Uint8Array;
export declare function getBlindingValues(serverPK: Uint8Array, signingKeys: KeyPair): {
    a: Uint8Array;
    secretKey: Uint8Array;
    publicKey: Uint8Array;
};
export declare const concatUInt8Array: (...args: Array<Uint8Array>) => Uint8Array;
export declare function signSogsRequest(this: Session, { blind, serverPk, timestamp, endpoint, nonce, method, body }: {
    blind: boolean;
    serverPk: string;
    timestamp: number;
    endpoint: string;
    nonce: Uint8Array;
    method: string;
    body?: string | Uint8Array;
}): Promise<Uint8Array>;
export declare function sendSogsRequest(this: Session, { host, serverPk, endpoint, method, body, blind, }: {
    host: string;
    serverPk: string;
    endpoint: string;
    method: string;
    body?: string | Uint8Array;
    blind: boolean;
}): Promise<unknown>;
