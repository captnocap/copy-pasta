import { wrap } from '../crypto/message-encrypt.js';
import { ReadReceiptMessage } from '../messages/schema/read-receipt-message.js';
import { toRawMessage } from '../messages/signal-message.js';
import { SnodeNamespaces } from '@session.js/types';
export async function markMessagesAsRead({ from, messagesTimestamps, readAt }) {
    const readReceiptMessage = new ReadReceiptMessage({
        timestamp: readAt ?? Date.now(),
        timestamps: messagesTimestamps,
    });
    const timestamp = this.getNowWithNetworkOffset();
    const rawMessage = toRawMessage(from, readReceiptMessage, SnodeNamespaces.UserMessages);
    const [wrappedMessage] = await wrap(this.keypair, [{
            destination: from,
            plainTextBuffer: rawMessage.plainTextBuffer,
            namespace: rawMessage.namespace,
            ttl: rawMessage.ttl,
            identifier: rawMessage.identifier,
            isSyncMessage: false,
            isGroup: false
        }], { networkTimestamp: timestamp });
    await this._storeMessage({ message: rawMessage, data: wrappedMessage });
}
