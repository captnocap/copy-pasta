import { wrap } from '../crypto/message-encrypt.js';
import { VisibleMessage } from '../messages/schema/visible-message.js';
import { toRawMessage } from '../messages/signal-message.js';
import { ReactionAction } from '../reactions/index.js';
import { SnodeNamespaces } from '@session.js/types';
export async function addReaction({ messageTimestamp, messageAuthor, emoji }) {
    await sendReactionMessage.call(this, {
        messageTimestamp,
        emoji,
        action: ReactionAction.REACT,
        messageAuthor
    });
}
export async function removeReaction({ messageTimestamp, messageAuthor, emoji }) {
    await sendReactionMessage.call(this, {
        messageTimestamp,
        emoji,
        action: ReactionAction.REMOVE,
        messageAuthor
    });
}
async function sendReactionMessage({ messageTimestamp, action, messageAuthor, emoji }) {
    const reactionMessageParams = {
        body: '',
        timestamp: this.getNowWithNetworkOffset(),
        reaction: {
            id: messageTimestamp,
            action,
            author: messageAuthor,
            emoji,
        },
        profile: this.getMyProfile(),
        expirationType: null,
        expireTimer: null,
    };
    const reactionMessage = new VisibleMessage(reactionMessageParams);
    const rawMessage = toRawMessage(messageAuthor, reactionMessage, SnodeNamespaces.UserMessages);
    const syncReactionMessage = new VisibleMessage({
        ...reactionMessageParams,
        syncTarget: messageAuthor
    });
    const syncRawMessage = toRawMessage(this.getSessionID(), syncReactionMessage, SnodeNamespaces.UserMessages);
    const [wrappedMessage, syncWrappedMessage] = await wrap(this.keypair, [{
            destination: messageAuthor,
            plainTextBuffer: rawMessage.plainTextBuffer,
            namespace: rawMessage.namespace,
            ttl: rawMessage.ttl,
            identifier: rawMessage.identifier,
            isSyncMessage: false,
            isGroup: false
        }, {
            destination: this.getSessionID(),
            plainTextBuffer: syncRawMessage.plainTextBuffer,
            namespace: syncRawMessage.namespace,
            ttl: syncRawMessage.ttl,
            identifier: syncRawMessage.identifier,
            isSyncMessage: true,
            isGroup: false
        }], { networkTimestamp: this.getNowWithNetworkOffset() });
    await this._storeMessage({ message: rawMessage, data: wrappedMessage });
    await this._storeMessage({ message: syncRawMessage, data: syncWrappedMessage });
}
