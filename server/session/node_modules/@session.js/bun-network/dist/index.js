import { RequestType } from '@session.js/types/network/request';
import { storeMessage } from './routes/store';
import { getSnodes } from './routes/get-snodes';
import { getSwarms } from './routes/get-swarms';
import { poll } from './routes/poll';
import { uploadAttachment } from './routes/upload-attachment';
import { downloadAttachment } from './routes/download-attachment';
import { deleteMessages } from './routes/delete-messages';
import { sogsRequest } from './routes/sogs-request';
import { SessionFetchError, SessionFetchErrorCode } from '@session.js/errors';
export async function onRequest(type, body) {
    switch (type) {
        case RequestType.Store:
            return await storeMessage.call(this, body);
        case RequestType.GetSnodes:
            return await getSnodes.call(this);
        case RequestType.GetSwarms:
            return await getSwarms.call(this, body);
        case RequestType.Poll:
            return await poll.call(this, body);
        case RequestType.UploadAttachment:
            return await uploadAttachment.call(this, body);
        case RequestType.DownloadAttachment:
            return await downloadAttachment.call(this, body);
        case RequestType.DeleteMessages:
            return await deleteMessages.call(this, body);
        case RequestType.SOGSRequest:
            return await sogsRequest.call(this, body);
        default:
            throw new SessionFetchError({ code: SessionFetchErrorCode.UnknownMethod, message: 'Invalid request type' });
    }
}
export class BunNetwork {
    proxy;
    constructor(options) {
        this.proxy = options?.proxy && (typeof options.proxy === 'string'
            ? options.proxy
            : (options.proxy.username && options.proxy.password)
                ? `${options.proxy.protocol}://${options.proxy.username}:${options.proxy.password}@${options.proxy.hostname}:${options.proxy.port}`
                : `${options.proxy.protocol}://${options.proxy.hostname}:${options.proxy.port}`);
    }
    onRequest(type, body) {
        return onRequest.call(this, type, body);
    }
}
