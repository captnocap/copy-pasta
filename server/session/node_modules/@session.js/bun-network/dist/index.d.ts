import { RequestType, type RequestGetSwarmsBody, type RequestStoreBody, type RequestUploadAttachment, type RequestDownloadAttachment, type RequestSogs } from '@session.js/types/network/request';
import type { ResponseGetSnodes, ResponseGetSwarms, ResponseStore, ResponseUploadAttachment } from '@session.js/types/network/response';
import type { Network } from '@session.js/types';
export declare function onRequest(this: BunNetwork, type: RequestType.Store, body: RequestStoreBody): Promise<ResponseStore>;
export declare function onRequest(this: BunNetwork, type: RequestType.GetSnodes, body: object): Promise<ResponseGetSnodes>;
export declare function onRequest(this: BunNetwork, type: RequestType.GetSwarms, body: RequestGetSwarmsBody): Promise<ResponseGetSwarms>;
export declare function onRequest(this: BunNetwork, type: RequestType.UploadAttachment, body: RequestUploadAttachment): Promise<ResponseUploadAttachment>;
export declare function onRequest(this: BunNetwork, type: RequestType.DownloadAttachment, body: RequestDownloadAttachment): Promise<ArrayBuffer>;
export declare function onRequest(this: BunNetwork, type: RequestType.SOGSRequest, body: RequestSogs): Promise<object>;
export type ProxyOptions = {
    protocol: 'http' | 'https';
    username?: string;
    password?: string;
    hostname: string;
    port: number;
};
export declare class BunNetwork implements Network {
    proxy: string | undefined;
    constructor(options?: {
        proxy?: ProxyOptions | string;
    });
    onRequest(this: BunNetwork, type: RequestType, body: object): Promise<object>;
}
